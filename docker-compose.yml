name: ${COMPOSE_PROJECT_NAME:-llm-stack-8gb}

networks:
  llm-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.25.0.0/16}

services:
  neo4j:
    image: neo4j:5.15.0-community
    container_name: neo4j-llm
    hostname: neo4j
    restart: unless-stopped

    environment:
      # Database authentication
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/Scaibu@123}
      # Accept the license
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Memory settings (tuned for an 8GB host)
      - NEO4J_server_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-256m}
      - NEO4J_server_memory_heap_max__size=${NEO4J_HEAP_MAX:-512m}
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGECACHE:-256m}
      # Listen addresses (correctly named)
      - NEO4J_server_default__listen__address=0.0.0.0
      - NEO4J_server_bolt_listen__address=0.0.0.0:${NEO4J_BOLT_PORT:-7687}
      - NEO4J_server_http_listen__address=0.0.0.0:${NEO4J_HTTP_PORT:-7474}
      # Plugins and APOC
      - NEO4J_PLUGINS=${NEO4J_PLUGINS:-["apoc"]}
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      # Disable strict config validation (helps ignore other spurious NEO4J_* env vars)
      - NEO4J_server_config_strict__validation_enabled=false

    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"

    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins

    networks:
      - llm-network

    deploy:
      resources:
        limits:
          memory: ${NEO4J_MEMORY_LIMIT:-1g}
          cpus: "${NEO4J_CPUS:-1.0}"
        reservations:
          memory: 512m
          cpus: "0.5"

    healthcheck:
      test: [
        "CMD-SHELL",
        "cypher-shell -u neo4j -p Scaibu@123 'RETURN 1' || exit 1"
      ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  ollama:
    image: ollama/ollama:latest
    container_name: ollama-llm
    hostname: ollama
    restart: unless-stopped

    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-0.0.0.0:11434}
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-1}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-1}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - OLLAMA_CONTEXT_LENGTH=${OLLAMA_CONTEXT_LENGTH:-2048}
      - OLLAMA_NUM_THREADS=${OLLAMA_NUM_THREADS:-4}
      - OLLAMA_FLASH_ATTENTION=false
      - OLLAMA_DEBUG=false

    ports:
      - "${OLLAMA_PORT:-11434}:11434"

    volumes:
      - ollama_data:/root/.ollama

    networks:
      - llm-network

    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-4g}
          cpus: "${OLLAMA_CPUS:-2.0}"
        reservations:
          memory: 2g
          cpus: "1.0"

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

    depends_on:
      neo4j:
        condition: service_healthy

volumes:
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/neo4j/data
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/neo4j/logs
  neo4j_import:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/neo4j/import
  neo4j_plugins:
    driver: local
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/ollama
